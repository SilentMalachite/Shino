name: CI

on:
  push:
    branches: [main, master]
    tags: ['v*']  # タグプッシュ時にも実行
  pull_request:
    branches: [main, master]

jobs:
  build-test:
    name: ${{ matrix.os }} / ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]
    steps:
      - uses: actions/checkout@v4

      - name: Cache build files
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            build/
          key: ${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
            ${{ runner.os }}-${{ matrix.build_type }}-

      - name: Set up CMake and Ninja
        uses: lukka/get-cmake@v3.30.2
        with:
          ninja: true

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ccache ninja-build

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ccache ninja-build

      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake .. -DSHINO_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_STANDARD=20 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_PARALLEL_LEVEL=$(nproc) -G Ninja

      - name: Test
        run: ctest --test-dir build --output-on-failure -C ${{ matrix.build_type }}

      - name: Generate coverage report
            echo "::error::Built binary not found"
            exit 1
          fi
          echo "binary_path=$BIN" >> $GITHUB_OUTPUT
          echo "Found binary: $BIN"
          echo "Found binary: $BIN"

      - name: Package binary
        shell: bash
        run: |
          mkdir -p package
          NAME=ShinoEditor-${{ runner.os }}-${{ matrix.build_type }}
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            NAME=ShinoEditor-${{ runner.os }}-${{ runner.arch }}-${{ matrix.build_type }}
          fi
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            7z a -r package/$NAME.zip "${{ steps.find_binary.outputs.binary_path }}" || echo "7z failed, binary will be uploaded as-is"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
          else
            tar -czf package/$NAME.tar.gz -C "$(dirname "${{ steps.find_binary.outputs.binary_path }}")" "$(basename "${{ steps.find_binary.outputs.binary_path }}")"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ShinoEditor-${{ runner.os }}-${{ matrix.build_type }}
          path: package/*
          if-no-files-found: error

  release:
    needs: build-test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
